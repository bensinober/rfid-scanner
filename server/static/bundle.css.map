{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/pages/Shelf.html",
    "../src/components/ShelfList.html",
    "../src/components/ShelfContent.html",
    "../src/pages/Item.html",
    "../src/components/ItemInfo.html",
    "../src/components/ItemContent.html",
    "../src/components/Search.html"
  ],
  "sourcesContent": [
    "<div class=\"container\">\n  <div class=\"shelf-list\"><ShelfList shelves=\"{{ shelves }}\" :locationMap /></div>\n  {{#if path.shelfId}}\n    Shelf: {{path.shelfId}}\n    <div class=\"shelf-content\"><ShelfContent :shelf :locationMap /></div>\n  {{/if}}\n</div>\n\n<script>\n  import SvelteRouter from 'svelte-router'\n  import ShelfList from '../components/ShelfList.html'\n  import ShelfContent from '../components/ShelfContent.html'\n  const { createRouter } = SvelteRouter\n  export default {\n    data: () => ({\n      shelves: {},\n      shelf: {},\n      locationMap: null\n    }),\n    components: {\n      ShelfList,\n      ShelfContent\n    },\n    oncreate () {\n      // get shelves from api\n      const api = \"http://spore.deichman.no/api\"\n      fetch(`${api}/shelves`)\n      .then(res  => { return res.json() })\n      .then(json => {\n        return new Promise((resolve) => {\n          let m = new Map\n          for (const shelf of json.results) {\n            let l = new Set\n            let locs = shelf.loc.split('.')\n            for (let i=0;i < locs.length;i++) {\n              l.add({\n                link: `${locs.slice(0,i+1).join('.')}`,\n                name: locs[i]\n              })\n            }\n            m.set(shelf.loc, l)\n          }\n          resolve(this.set({\n            locationMap: m,\n            shelves: json\n          }))\n        })\n      })\n      .then(() => {\n        const path = this.get(\"path\")\n        if (path.shelfId) {\n          // get shelvf from path route\n          return Promise.resolve(fetch(`${api}/shelf/${path.shelfId}`))\n        } else {\n          return Promise.reject(\"No shelf id\")\n        }\n      })\n      .then(res  => { return res.json() })\n      .then(json => {\n        return this.set({shelf: json})\n      })\n      .catch(err => {\n        console.log(`something broke: ${err}`)\n        throw err\n      })\n    }\n  }\n</script>\n<style type=\"text/css\">\n  .container{\n    width: 100%;\n  }\n\n  .shelf-list {\n    float: left;\n    width: 20%;\n  }\n  .shelf-content {\n    float: right;\n    width: 80%;\n  }\n</style>",
    "<div>\n  <table border=1 cellspacing=0 cellpadding=3 style=\"max-width: 250px;\">\n    <thead>\n      <tr><th>shelf</th><th>items</th><tr>\n    </thead>\n    <tbody>\n      {{#if shelves.results}}\n        {{#each shelves.results as res}}\n          {{#if res.loc }}\n          <tr>\n            <td>\n                <ShelfLink loc=\"{{res.loc}}\">\n            </td>\n            <td>{{res.tags}}</td>\n          </tr>\n          {{/if}}\n        {{/each}}\n      {{/if}}\n    </tbody>\n  </table>\n</div>\n<script>\n  import SvelteRouter from 'svelte-router'\n  import ShelfLink from '../components/ShelfLink.html'\n  export default {\n    props: ['shelves'],\n    components: {ShelfLink,},\n  }\n</script>\n<style>\n  a {\n      text-decoration: none;\n      color: #840;\n  }\n  a:hover {\n      background-color: #fa5;\n      color: black;\n  }\n  td {\n      padding: 2px;\n      padding-left: 5px;\n      padding-right: 3px;\n      border-top: none;\n      border-left: none;\n      white-space: nowrap;\n      font-size: 11px;\n  }\n  th {\n      background-color: #ccc;\n      border-top: none;\n      border-left: none;\n      font-size: 12px;\n  }\n</style>\n",
    "<div>\n  <table border=1 cellspacing=0 cellpadding=3>\n    <thead>\n      <tr><th>at</th><th>location</th><th>barcode</th><th>callnum</th><th width=\"15%\">author</th><th>title</th><th>last</th></tr>\n    </thead>\n    <tbody>\n      {{#if shelf.results}}\n        {{#each shelf.results as res}}\n          <tr>\n            <td><abbr title=\"{{res.last_at.iso8601}}\">{{res.last_at.ago || res.last_at.iso8601}}</abbr></td>\n            <td><ShelfLink loc=\"{{res.tags[0].temporary.loc}}\"></td>\n            <td><a href=\"/#/item/{{res.item_id}}\">{{res.item_id}}</a></td>\n            <td>{{ Array.isArray(res.meta.callnumber) ? res.meta.callnumber.join(' ') : res.meta.callnumber }}</td>\n            <td style=\"max-width: 200px;\"><abbr title=\"{{res.meta.author}}\">{{res.meta.author}}</abbr></td>\n            <td style=\"max-width: 200px;\"><abbr title=\"{{res.meta.title}}\">{{res.meta.title}}</abbr></td>\n          </tr>\n        {{/each}}\n      {{/if}}\n  </table>\n</div>\n<script>\n    import SvelteRouter from 'svelte-router'\n    import ShelfLink from '../components/ShelfLink.html'\n    export default {\n        props: ['shelf'],\n        components: {ShelfLink,},\n        oncreate() {\n            //console.log(shelf);\n        },\n    }\n</script>\n<style>\n  a:hover {\n    background-color: #fa5;\n    color: black;\n  }\n  abbr {\n    text-decoration: none;\n  }\n  td {\n    padding: 2px;\n    padding-left: 5px;\n    padding-right: 3px;\n    border-top: none;\n    border-left: none;\n    white-space: nowrap;\n    font-size: 11px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  th {\n    background-color: #ccc;\n    border-top: none;\n    border-left: none;\n    font-size: 12px;\n  }\n</style>\n",
    "<div class=\"container\">\n  <div class=\"item-info\">\n    <ItemInfo :item :locationMap />\n  </div>\n  <div class=\"history\">\n    <ItemContent barcode=\"{{path.barcode}}\" :item :locationMap />\n  </div>\n</div>\n\n<script>\n  import SvelteRouter from 'svelte-router'\n  import ItemInfo from '../components/ItemInfo.html'\n  import ItemContent from '../components/ItemContent.html'\n  const { createRouter } = SvelteRouter\n  export default {\n    data: () => ({\n      item: null,\n      locationMap: null\n    }),\n    methods: {\n      goHome () {\n        createRouter.replace('/')\n      }\n    },\n    oncreate() {\n      // get shelves from api\n      const api = \"http://spore.deichman.no/api\"\n      fetch(`${api}/shelves`)\n      .then(res  => { return res.json() })\n      .then(json => {\n        return new Promise((resolve) => {\n          let m = new Map\n          for (const shelf of json.results) {\n            let l = new Set\n            let locs = shelf.loc.split('.')\n            for (let i=0;i < locs.length;i++) {\n              l.add({\n                link: `${locs.slice(0,i+1).join('.')}`,\n                name: locs[i]\n              })\n            }\n            m.set(shelf.loc, l)\n          }\n          resolve(this.set({\n            locationMap: m\n          }))\n        })\n      })\n      // get barcode from path route\n      .then(() => {\n        const path = this.get(\"path\")\n        const productId = \"NO:02030000\"\n        if (path.barcode) {\n          return Promise.resolve(fetch(`${api}/item/${productId}/${path.barcode}`))\n        } else {\n          return Promise.reject(\"No shelf id\")\n        }\n      })\n      .then(res  => { return res.json() })\n      .then(json => {\n        console.log(json)\n        return this.set({item: json})\n      })\n      .catch(err => {\n        console.log(`something broke: ${err}`)\n        throw err\n      })\n    },\n    components: {\n      ItemContent,\n      ItemInfo\n    }\n  }\n</script>\n<style type=\"text/css\">\n  .container{\n    width: 100%;\n  }\n\n  .item-info {\n    display: inline-block;\n    max-width: 280px;\n    vertical-align: top;\n  }\n  .history {\n    display: inline-block;\n    max-width: 700px;\n    vertical-align: top;\n  }\n</style>\n",
    "<div>\n  {{#if item}}\n  <table border=1 cellspacing=0 cellpadding=3 style=\"max-width: 250px; \">\n    {{#if item.response && item.response.meta }}\n      <tr><td colspan=2>\n        <img src=\"https://img.deichman.no/biblionumber/{{item.response.meta.biblionumber}}\" alt=\"item image/cover\">\n      </td>\n      <tr><th colspan=2>{{ item.response.meta.title }}</th></tr>\n      <tr><td>author</td><td>{{ item.response.meta.author }}</td></tr>\n      <tr><td>cn</td><td>{{ item.response.meta.callnumber }}</td></tr>\n      <tr><td>barcode</td><td><a href=\"/#/item/{{ item.item_id }}\">{{ item.item_id }}</a></td></tr>\n      <tr><td>bibnum</td><td>{{ item.response.meta.biblionumber }} [<a href=\"https://intra.deichman.no/cgi-bin/koha/catalogue/detail.pl?biblionumber={{ item.response.meta.biblionumber }}\">Koha</a>]</td></tr>\n    {{/if}}\n    <!-- TODO, dont render until locationMap is set -->\n      {{#each item.response.tags as tag}}\n        <tr><th colspan=2>tag</th></tr>\n        <tr><td>rfid</td><td>{{ tag.rfid }}</td></tr>\n        {{#if tag.permanent.at }}\n            <tr><td>perm</td><td>\n            <ShelfLink loc=\"{{tag.permanent.loc}}\" />\n            </td></tr>\n            <tr><td>at</td><td><abbr title=\"{{ tag.permanent.at.iso8601 }}\">{{ tag.permanent.at.ago || tag.permanent.at.iso8601 }}</abbr></td></tr>\n            <tr><td>dev</td><td><a href=\"/#/dev/{{ tag.permanent.dev }}\">{{ tag.permanent.dev }}</a></td></tr>\n        {{/if}}\n        {{#if tag.temporary.at }}\n            <tr><td>temp</td><td>\n            <ShelfLink loc=\"{{tag.temporary.loc}}\" />\n            </td></tr>\n            <tr><td>at</td><td><abbr title=\"{{ tag.temporary.at.iso8601 }}\">{{ tag.temporary.at.ago || tag.temporary.at.iso8601 }}</abbr></td></tr>\n            <tr><td>dev</td><td><a href=\"/#/dev/{{ tag.temporary.dev }}\">{{ tag.temporary.dev }}</a></td></tr>\n        {{/if}}\n      {{/each}}\n    </table>\n  {{/if}}\n</div>\n<script>\n  import SvelteRouter from 'svelte-router'\n  import ShelfLink from '../components/ShelfLink.html'\n  export default {\n    props: [\"item\"],\n    components: {ShelfLink,},\n  }\n</script>\n<style>\n  td {\n      padding: 2px;\n      padding-left: 5px;\n      padding-right: 3px;\n      border-top: none;\n      border-left: none;\n      white-space: nowrap;\n      font-size: 11px;\n  }\n  th {\n      background-color: #ccc;\n      border-top: none;\n      border-left: none;\n      font-size: 12px;\n  }\n  tr {\n  }\n  tr.hit {\n      background-color: #fbb;\n  }\n  .hex {\n      font-size: 60%;\n      border: 1px solid gray;\n      margin-right: 1px;\n      background-color: gray;\n      color: white;\n  }\n  .hex-utf {\n      background-color: #ddd;\n  }\n</style>\n",
    "<div>\n  {{#if item && item.response }}\n    {{#if item.response.meta }}\n      <h1>{{ item.response.meta.title }}</h1>\n      <form>\n      <label for=\"code\">Search: </label>\n      <input id=\"code\" name=\"code\" bind:value=query class=\"ui-autocomplete-input\" autocomplete=\"off\">\n      <Search query=\"{{query}}\"/>\n      </form>\n      <hr size=\"1\">\n    {{/if}}\n    <table border=1 cellspacing=0 cellpadding=3 style=\"max-width: 250px; \">\n      <thead>\n        <tr><th>at</th><th>shelf</th><th>action</th><th>rfid</th></tr>\n      </thead>\n      <tbody>\n        {{#each item.response.history as it}}\n          <tr><td><abbr title=\"{{it.at.iso8601}}\">{{it.at.ago || it.at.iso8601}}</abbr></td>\n            <td>\n                <ShelfLink loc=\"{{it.location}}\" />\n            </td>\n            <td><div class=\"compact\">{{#each it.actions as action }}<div>{{action}}</div>{{/each}}</div></td>\n            <td><abbr title=\"{{it.dev || 'N/A'}}\">{{it.rfid || 'N/A'}}</abbr></td></tr>\n        {{/each}}\n      </tbody>\n    </table>\n  {{/if}}\n</div>\n<script>\n  import SvelteRouter from 'svelte-router'\n  import ShelfLink from '../components/ShelfLink.html'\n  import Search from '../components/Search.html'\n  export default {\n    props: [\"barcode\", \"item\"],\n    data() {\n        return {\n            query: \"\",\n        };\n    },\n    components: {ShelfLink, Search},\n  }\n</script>\n<style>\n  a:hover {\n    background-color: #fa5;\n    color: black;\n  }\n  td {\n    padding: 2px;\n    padding-left: 5px;\n    padding-right: 3px;\n    border-top: none;\n    border-left: none;\n    white-space: nowrap;\n    font-size: 11px;\n  }\n  th {\n    background-color: #ccc;\n    border-top: none;\n    border-left: none;\n    font-size: 12px;\n  }\n  .compact {\n    max-height: 13px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  .compact:hover {\n    max-height: 100px;\n  }\n</style>\n",
    "<div>\n  <table border=1 cellspacing=0 cellpadding=3>\n    <tbody>\n      {{#await results}}\n        <tr><td colspan=5>...</td></tr>\n      {{then answer}}\n        {{log(answer)}}\n        {{#if answer }}\n          {{#if answer.results && answer.results.length }}\n              {{#each answer.results as res }}\n                <tr>\n                  <td><abbr title=\"{{res.last_seen.iso8601}}\">{{res.last_seen.ago || res.last_seen.iso8601}}</abbr></td>\n                  <td><a href=\"/#/item/{{res.item_id}}\">{{res.item_id}}</a></td>\n                  <td style=\"max-width: 200px;\"><abbr title=\"{{res.meta.author}}\">{{res.meta.author}}</abbr></td>\n                  <td style=\"max-width: 200px;\"><abbr title=\"{{res.meta.title}}\">{{res.meta.title}}</abbr></td>\n                </tr>\n              {{/each}}\n          {{else}}\n              <tr><td colspan=5>No Entries</td></tr>\n          {{/if}}\n        {{/if}}\n      {{catch error}}\n        <tr><td colspan=6>error: {{error}}</td></tr>\n      {{/await}}\n  </table>\n</div>\n<script>\n    import SvelteRouter from 'svelte-router'\n    import ShelfLink from '../components/ShelfLink.html'\n    export default {\n        props: ['query'],\n        data() {\n            return {\n                results: [],\n            };\n        },\n        components: {ShelfLink},\n        helpers: {\n            log: function(x) {\n                console.log(x);\n                return \"\";\n            },\n        },\n        oncreate() {\n            console.log(this);\n            const ob = this.observe('query', query => {\n                console.log(\"changed: \", query);\n                if (query && query.length>=3) {\n                    this.set({results:\n                        fetch(`/api/search?q=${query}`)\n                        .then(res => {\n                            return res.json();\n                        })\n                    });\n                } else {\n                    this.set({results: undefined});\n                }\n            });\n        },\n    }\n</script>\n<style>\n  a:hover {\n    background-color: #fa5;\n    color: black;\n  }\n  abbr {\n    text-decoration: none;\n  }\n  td {\n    padding: 2px;\n    padding-left: 5px;\n    padding-right: 3px;\n    border-top: none;\n    border-left: none;\n    white-space: nowrap;\n    font-size: 11px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  th {\n    background-color: #ccc;\n    border-top: none;\n    border-left: none;\n    font-size: 12px;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAqEE,4BAAU,CAAC,AACT,KAAK,CAAE,IAAI,AACb,CAAC,AAED,WAAW,kBAAC,CAAC,AACX,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,cAAc,kBAAC,CAAC,AACd,KAAK,CAAE,KAAK,CACZ,KAAK,CAAE,GAAG,AACZ,CAAC;AC1CD,EAAE,mBAAC,CAAC,AACA,OAAO,CAAE,GAAG,CACZ,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,AACnB,CAAC,AACD,EAAE,mBAAC,CAAC,AACA,gBAAgB,CAAE,IAAI,CACtB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IAAI,AACnB,CAAC;ACpBD,oBAAC,MAAM,AAAC,CAAC,AACP,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,KAAK,AACd,CAAC,AACD,IAAI,mBAAC,CAAC,AACJ,eAAe,CAAE,IAAI,AACvB,CAAC,AACD,EAAE,mBAAC,CAAC,AACF,OAAO,CAAE,GAAG,CACZ,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,AACzB,CAAC,AACD,EAAE,mBAAC,CAAC,AACF,gBAAgB,CAAE,IAAI,CACtB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IAAI,AACjB,CAAC;ACoBD,4BAAU,CAAC,AACT,KAAK,CAAE,IAAI,AACb,CAAC,AAED,UAAU,kBAAC,CAAC,AACV,OAAO,CAAE,YAAY,CACrB,SAAS,CAAE,KAAK,CAChB,cAAc,CAAE,GAAG,AACrB,CAAC,AACD,QAAQ,kBAAC,CAAC,AACR,OAAO,CAAE,YAAY,CACrB,SAAS,CAAE,KAAK,CAChB,cAAc,CAAE,GAAG,AACrB,CAAC;AC5CD,EAAE,mBAAC,CAAC,AACA,OAAO,CAAE,GAAG,CACZ,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,AACnB,CAAC,AACD,EAAE,mBAAC,CAAC,AACA,gBAAgB,CAAE,IAAI,CACtB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IAAI,AACnB,CAAC;ACXD,EAAE,mBAAC,CAAC,AACF,OAAO,CAAE,GAAG,CACZ,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,EAAE,mBAAC,CAAC,AACF,gBAAgB,CAAE,IAAI,CACtB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,QAAQ,mBAAC,CAAC,AACR,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,AACzB,CAAC,AACD,2BAAQ,MAAM,AAAC,CAAC,AACd,UAAU,CAAE,KAAK,AACnB,CAAC;ACRD,oBAAC,MAAM,AAAC,CAAC,AACP,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,KAAK,AACd,CAAC,AACD,IAAI,mBAAC,CAAC,AACJ,eAAe,CAAE,IAAI,AACvB,CAAC,AACD,EAAE,mBAAC,CAAC,AACF,OAAO,CAAE,GAAG,CACZ,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,AACzB,CAAC"
}